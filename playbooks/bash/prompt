#!/bin/bash
#
#      Jonathan Perkin <jonathan@perkin.org.uk> wrote this file.
#
# You can freely distribute/modify it (and are encouraged to do so),
# and you are welcome to buy me a beer if we ever meet and you think
# this stuff is worth it.  Improvements and cleanups always welcome.
#
# ~/.bash/prompt - command line prompt for interactive bash shells.
#


#
# The way I configure my prompt is that PS1 is set to a static string, but
# references two variables that are updated by PROMPT_COMMAND on each refresh.
#
# They are:
#
#	PROMPT_PWD	The current working directory
#	PROMPT_BRANCH	The current git branch (if any)
#
# Configuration of PS1 is done at startup time, enabling colours if TERM is
# set to something that is likely to support them.
#
# There is also support for setting icon and title strings if we're likely to
# be running under a display environment.  As this needs to send the escape
# sequences directly each time, the calculations are performed inline.
#

#
# Pull in the upstream script for detecting the current git environment.
#
source ~/.bash/git-prompt

#
# This function sets up PS1, called by configure_prompt(), and if given
# "colour" as the first argument will enable ANSI colours.
#
configure_ps1()
{
	local reset black darkred darkgreen brown darkblue magenta darkcyan
	local grey darkgrey red green yellow blue pink cyan white reset

	#
	# Set up ANSI colours if on a terminal that supports them.  These are
	# wrapped in "[...]" to prevent bash from including them as printable
	# characters, thus computing the line length correctly.
	#
	# Use some indentation artistic license here to be clearer.
	#
	if [ "$1" = "colour" ]; then
		    reset="\[\e[0m\]"
		    black="${reset}\[\e[0;30m\]"
		  darkred="${reset}\[\e[0;31m\]"
		darkgreen="${reset}\[\e[0;32m\]"
		    brown="${reset}\[\e[0;33m\]"
		 darkblue="${reset}\[\e[0;34m\]"
		  magenta="${reset}\[\e[0;35m\]"
		 darkcyan="${reset}\[\e[0;36m\]"
		     grey="${reset}\[\e[0;37m\]"
		 darkgrey="${reset}\[\e[1;30m\]"
		      red="${reset}\[\e[1;31m\]"
		    green="${reset}\[\e[1;32m\]"
		   yellow="${reset}\[\e[1;33m\]"
		     blue="${reset}\[\e[1;34m\]"
		     pink="${reset}\[\e[1;35m\]"
		     cyan="${reset}\[\e[1;36m\]"
		    white="${reset}\[\e[1;37m\]"
	fi

	#
	# Start constructing the prompt.
	#
	local pstart="${cyan}-${darkcyan}-"
	local pmid="${darkcyan}-"
	local pend="${darkcyan}-${cyan}-\n${reset}"
	local puser="${cyan}<${darkgreen}\u${pink}@${darkgreen}\H${cyan}>"
	local pdir="${cyan}<${brown}\${PROMPT_PWD}${cyan}>"
	local pgit="\${PROMPT_BRANCH:+${cyan}(${pink}\${PROMPT_BRANCH}${cyan})${pmid}}"
	local pcmd="${darkcyan}-${cyan}> ${reset}"

	#
	# Use the same "-> " prefix for the prompt but change colour if root.
	#
	if [ ${UID} -eq 0 ]; then
		pcmd="${darkcyan}-${red}> ${reset}"
	fi

	PS1="${pstart}${puser}${pmid}${pgit}${pdir}${pend}${pcmd}"
}

#
# Set dynamic prompt variables on each refresh.
#
update_prompt_vars()
{
	#
	# Get the number of columns from the $COLUMNS variable, reduce by the
	# number of characters making up the rest of the prompt, 3 for the
	# "...", and an extra 2 to keep it away from the right hand edge a
	# bit.
	#
	# Unfortunately, $COLUMNS isn't set before the first prompt appears,
	# so we default to 80 in that case, which should suffice.
	#
	local userlen=$((${#USER}))
	local maxwidth=$((${COLUMNS:-80}-${userlen}-${#HOSTNAME}-10-3-2))

	if [ ${#PWD} -gt ${maxwidth} ]; then
		PROMPT_PWD="...${PWD:$((${#PWD}-${maxwidth})):${maxwidth}}"
	else
		PROMPT_PWD="${PWD}"
	fi

	#
	# Use the upstream git-branch functions to determine the current git
	# branch, or none if not inside a git repository.
	#
	PROMPT_BRANCH=$(__git_ps1 "%s")
}

#
# Update the icon name and title bar on each refresh.  As we need to print the
# escape sequences each time there's no need to do this with a dynamic variable
# like with PROMPT_PWD.
#
update_icon_title()
{
	#
	# As there is no accurate way to know what width we can use for the
	# current directory like we can with $COLUMNS, we err on the side of
	# caution and use a relatively conservative value.
	#
	local maxwidth=$((60-${#USER}-${#HOSTNAME}-6-3))
	local titlepwd

	if [ ${#PWD} -gt ${maxwidth} ]; then
		titlepwd="...${PWD:$((${#PWD}-${maxwidth})):${maxwidth}}"
	else
		titlepwd="${PWD}"
	fi

	#
	# These escape sequences are used to set various X strings (but are
	# also supported on e.g. macOS).
	#
	#   \e]0; = both title bar and icon name
	#   \e]1; = icon name
	#   \e]2; = title bar
	#
	# For the icon we just use the hostname as that's usually all they have
	# room for, whereas for the titlebar we can add the username and
	# current directory.
	#
	# Note that \033 is used instead of \e as the bash-3.2.57(1) shipped on
	# macOS doesn't like the latter for some reason.
	#
	local icon="\033]1;${HOSTNAME}\007"
	local title="\033]2;[${USER}@${HOSTNAME}] (${titlepwd})\007"

	echo -ne "${icon}${title}"
}

#
# Configure initial PS1 and recurring PROMPT_COMMAND based on TERM.
#
configure_prompt()
{
	case "${TERM}" in
	# Colour support, running under a display environment.
	dtterm|xterm*|rxvt|screen*)
		configure_ps1 colour
		PROMPT_COMMAND="update_prompt_vars; update_icon_title"
		;;
	# Colour support, but no display environment.
	cons25|vt220|linux)
		configure_ps1 colour
		PROMPT_COMMAND="update_prompt_vars"
		;;
	# Basic console, no colour.
	*)
		configure_ps1
		PROMPT_COMMAND="update_prompt_vars"
		;;
	esac
}

#
# Perform the setup automatically when sourced.
#
configure_prompt
